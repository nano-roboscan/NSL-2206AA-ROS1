#!/usr/bin/env python
# -*- coding: utf-8 -*-

PACKAGE = "roboscan_nsl2206"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Basic Settings 
gen.add("dev_name", str_t, 0, "0. Dev Name", "/dev/ttyNsl2206")
gen.add("cv_show", bool_t, 0, "A. Show OpenCV window", False)
# Frame ID
gen.add("frame_id", str_t, 0, "Q. Frame ID", "roboscan_frame")

# Image Type (default : 3 DISTANCE_AMPLITUDE)
gen.add("image_type", int_t, 0, "C. Image Type", 2,
        edit_method=dict(enum=[
            {"name": "DISTANCE",                "value": 1, "description": "Distance only"},
            {"name": "DISTANCE_AMPLITUDE",      "value": 2, "description": "Distance + Amplitude (default)"},
        ]))

gen.add("hdr_mode", int_t, 0, "D. HDR Mode", 0,
        edit_method=dict(enum=[
            {"name": "HDR_OFF",      "value": 0, "description": "HDR disabled (default)"},
            {"name": "HDR_SPATIAL",  "value": 1, "description": "Spatial HDR"},
            {"name": "HDR_TEMPORAL", "value": 2, "description": "Temporal HDR"}
        ]))

gen.add("int_0",  int_t, 0, "E. Integration Time 3D",       1000, 0, 2000)
gen.add("int_1",  int_t, 0, "F. Integration Time 3D HDR 1", 500, 0, 2000)
gen.add("int_2",  int_t, 0, "G. Integration Time 3D HDR 2", 100, 0, 2000)
gen.add("int_3",  int_t, 0, "G. Integration Time 3D HDR 3", 0, 0, 2000)
gen.add("int_gr", int_t, 0, "H. Integration Time Grayscale", 100, 0, 40000)
gen.add("min_amplitude0", int_t, 0, "I. Minimum Amplitude", 100, 0, 1000)
gen.add("min_amplitude1", int_t, 0, "I. Minimum Amplitude", 100, 0, 1000)
gen.add("min_amplitude2", int_t, 0, "I. Minimum Amplitude", 100, 0, 1000)
gen.add("min_amplitude3", int_t, 0, "I. Minimum Amplitude", 100, 0, 1000)

gen.add("mod_index", int_t, 0, "J. Modulation Frequency", 0,
        edit_method=dict(enum=[
            {"name": "10MHz", "value": 0, "description": "10 MHz (default)"},
            {"name": "20MHz", "value": 1, "description": "20 MHz"},
        ]))
gen.add("channel", int_t, 0, "K. Modulation Channel", 0, 0, 15)

gen.add("roi_left_x",             int_t,    0,  "ROI left X",     0, 0,  153)
gen.add("roi_top_y",              int_t,    0,  "ROI top Y",      0, 0,   57)
gen.add("roi_right_x",            int_t,    0,  "ROI right X",  159, 5,  159)
gen.add("roi_bottom_y",           int_t,    0,  "ROI bottom Y",  59, 1,   59)

gen.add("transform_angleV", double_t, 0, "P. Transform Angle V", 0.0, -90.0, 90.0)
gen.add("transform_angleH", double_t, 0, "P. Transform Angle H", 0.0, -90.0, 90.0)

gen.add("median_filter",   bool_t, 0, "R. Median Filter", False)
gen.add("gaussian_filter", bool_t, 0, "S. Gaussian Filter", False)
gen.add("temporal_filter_factor",    double_t, 0, "T. Temporal Filter Factor", 0.0, 0.0, 1.0) #0.0~1.0, 내부적으로 0~1000 scaling
gen.add("temporal_filter_threshold", int_t,    0, "T. Temporal Filter Threshold", 0, 0, 1000)
gen.add("edge_filter_threshold",     int_t,    0, "U. Edge Filter Threshold", 0, 0, 5000)

gen.add("interference_detection_limit", int_t, 0, "V. Interference Detection Limit", 0, 0, 10000)
gen.add("use_last_value", bool_t, 0, "V. Use Last Value for Interference", False)
gen.add("pointcloud_edge", int_t, 0, "Y. PointCloud Edge Threshold", 200, 0, 10000)
gen.add("max_distance", int_t, 0, "Z. Max Distance (mm)", 15000, 0, 15000)

exit(gen.generate(PACKAGE, "roboscan_nsl2206_node", "RoboscanNSL2206"))
