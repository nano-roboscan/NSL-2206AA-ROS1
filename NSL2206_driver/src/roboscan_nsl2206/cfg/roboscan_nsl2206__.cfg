#!/usr/bin/env python

PACKAGE = "roboscan_nsl2206"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

image_type_enum = gen.enum([ gen.const("Grayscale", int_t, 0, "Grayscale"),
                             gen.const("Distance",  int_t, 1, "Distance"),
                             gen.const("Distance_and_Amplitude", int_t, 2, "Distance and Amplitude"),
                             gen.const("Distance_and_Grayscale", int_t, 3, "Distance and Grayscale")
                             ], "An enum to set image type")

mod_freq_enum   = gen.enum([ gen.const("10_MHz", int_t, 0, "10 MHz"),
                             gen.const("20_MHz", int_t, 1, "20 MHz")
                             ], "An enum to set modulation frequency")


op_mod_enum     = gen.enum([ gen.const("Wide_Field_image", int_t, 0, "Wide Field image"),
                             gen.const("Narrow_Field_manual", int_t, 1, "Narrow Field manual"),
                             gen.const("Wide_Field_and_Narrow_Field_result", int_t, 2, "Wide Field and Narrow Field result")  #TODO...
                             #gen.const("Narrow_Field_result", int_t, 2, "Narrow Field result"),
                             #gen.const("Narrow_Field_result_and_image", int_t, 3, "Narrow Field result and image"),
                             #gen.const("Wide_Field_and_Narrow_Field_result", int_t, 4, "Wide Field and Narrow Field result"),
                             #gen.const("Wide_Field_and_Narrow_Field_auto", int_t, 5, "Wide_Field and Narrow Field auto"),
                             #gen.const("Wide_Field_and_Narrow_Field_image", int_t, 6, "Wide Field and Narrow Field image")
                             ], "An enum to set operating mode")


######  Name                      Type   Reconfiguration level  Description     Default Min  Max
### Acquisition Control
gen.add("image_type",             int_t,    0,  "Image type",  1, 0, 3, edit_method = image_type_enum)
gen.add("mod_frequency",          int_t,    0,  "Modulation Frequency", 0, 0, 1, edit_method = mod_freq_enum)
gen.add("mode",                   int_t,    0,  "Operating mode", 0, 0, 2, edit_method = op_mod_enum)

gen.add("start_stream",          bool_t,    0,  "Start / Stop image acquisition streaming",  False)
gen.add("trigger_single_shot",   bool_t,    0,  "Single image acquisition",  False)
gen.add("integration_time_0",     int_t,    0,  "Integration time TOF for beam A [uS]",       200, 0, 1000)
gen.add("integration_time_1",     int_t,    0,  "Integration time TOF for beam A [uS]",         0, 0, 1000)
gen.add("integration_time_2",     int_t,    0,  "Integration time TOF for beam A [uS]",         0, 0, 1000)
gen.add("integration_time_3",     int_t,    0,  "Integration time TOF for beam A [uS]",         0, 0, 1000)
gen.add("integration_time_4",     int_t,    0,  "Integration time TOF for beam B [uS]",       200, 0, 1000)
gen.add("integration_time_5",     int_t,    0,  "Integration time TOF for beam B [uS]",         0, 0, 1000)
gen.add("integration_time_gray",  int_t,    0,  "Integration time Grayscale [uS]",              0, 0, 50000)

gen.add("temporal_filter_factor", double_t, 0,  "Kalman filter gain coefficient", 0.0, 0.0, 1.0)
gen.add("temporal_filter_threshold", int_t, 0,  "Kalman filter threshold [mm]",    0, 0, 10000)
gen.add("spatial_average_filter", bool_t,   0,  "Spatial average filter",  False)
gen.add("spatial_median_filter",  bool_t,   0,  "Median filter",           False)

gen.add("min_amplitude_0",        int_t,    0,  "threshold minAmplitude 0 beam A LSB",       50, 0, 2047)
gen.add("min_amplitude_1",        int_t,    0,  "threshold minAmplitude 1 beam A LSB",      100, 0, 2047)
gen.add("min_amplitude_2",        int_t,    0,  "threshold minAmplitude 2 beam A LSB",      200, 0, 2047)
gen.add("min_amplitude_3",        int_t,    0,  "threshold minAmplitude 3 beam A LSB",      500, 0, 2047)
gen.add("min_amplitude_4",        int_t,    0,  "threshold minAmplitude 4 beam B LSB",      200, 0, 2047)

gen.add("offset_distance",        int_t,    0,  "distance offset mm",     0, -15000, 15000)
gen.add("roi_left_x",             int_t,    0,  "ROI left X",     0, 0,  153)
gen.add("roi_top_y",              int_t,    0,  "ROI top Y",      0, 0,   57)
gen.add("roi_right_x",            int_t,    0,  "ROI right X",  159, 5,  159)
gen.add("roi_bottom_y",           int_t,    0,  "ROI bottom Y",  59, 1,   59)

gen.add("lens_angle",             int_t,    0,  "Lens lens_angle", 90, 0, 180)
gen.add("enable_undistortion",   bool_t,    0,  "Enable undistortion",  False)
gen.add("enable_cartesian",      bool_t,    0,  "Cartesian transformation",  True)
gen.add("enable_images",         bool_t,    0,  "Enable Images",  True)
gen.add("enable_point_cloud",    bool_t,    0,  "Enable point cloud",  True)
gen.add("enable_image_header",   bool_t,    0,  "Enable image header",  True)

exit(gen.generate(PACKAGE, "roboscan_publish_node", "roboscan_nsl2206"))
